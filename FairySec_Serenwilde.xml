<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
  <TriggerPackage>
    <TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
      <name>Fairy Secretary</name>
      <script></script>
      <triggerType>0</triggerType>
      <conditonLineDelta>0</conditonLineDelta>
      <mStayOpen>0</mStayOpen>
      <mCommand></mCommand>
      <packageName></packageName>
      <mFgColor>#ff0000</mFgColor>
      <mBgColor>#ffff00</mBgColor>
      <mSoundFile></mSoundFile>
      <colorTriggerFgColor>#000000</colorTriggerFgColor>
      <colorTriggerBgColor>#000000</colorTriggerBgColor>
      <regexCodeList />
      <regexCodePropertyList />
      <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
        <name>fairySec tracking</name>
        <script></script>
        <triggerType>0</triggerType>
        <conditonLineDelta>0</conditonLineDelta>
        <mStayOpen>0</mStayOpen>
        <mCommand></mCommand>
        <packageName></packageName>
        <mFgColor>#ff0000</mFgColor>
        <mBgColor>#ffff00</mBgColor>
        <mSoundFile></mSoundFile>
        <colorTriggerFgColor>#000000</colorTriggerFgColor>
        <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList />
        <regexCodePropertyList />
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>log converted date</name>
          <script>deleteLine()
tempLineTrigger(1, 2, [[deleteLine()]])
local logDate = matches[3].."\/"..matches[2].." "..matches[4]
fairySec:addConvertedDate(logDate, matches[5].." "..matches[6], matches[7])</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>^Real world (\d{2}\/\d{2})\/(\d{4}) at (\d{2}:\d{2}:\d{2}):00 would be (\d+)(?:st|nd|rd|th) of (\w+), year (\d{3})$</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>log reward year date</name>
          <script>local logDate = matches[2]
local desc = matches[3]
local yearlyCredits = matches[4]
local loggedActivity = {
  uniqueId = logDate.." ".."rewardAudit audit",
  timestamp = logDate,
  desc = desc,
  trackedType = "audit",
  names = ""
}

local loggedActivityIkonParticipation = {
  uniqueId = logDate.." ".."ikonParticipation",
  timestamp = logDate,
  desc = "Participation in the Annual Ikon tournament",
  trackedType = "ikonParticipation",
  names = ""
}

if not fairySec:hasActivity(loggedActivity) then fairySec:addActivity(loggedActivity) end
if not fairySec:hasActivity(loggedActivityIkonParticipation) then fairySec:addActivity(loggedActivityIkonParticipation) end

if (fairySec.rewards.total.logDateStart ~= "" and fairySec.isRoughYearStart() and
    fairySec:getOSTime(logDate) &gt; fairySec:getOSTime(fairySec.rewards.total.logDateStart) - fairySec.HOUR_IN_SECONDS and
    fairySec:getOSTime(logDate) &lt; fairySec:getOSTime(fairySec.rewards.total.logDateStart) + fairySec.HOUR_IN_SECONDS) then
  fairySec.rewards.total.logDateStart = logDate
  fairySec:debug("setting logDateStart "..logDate)
end
if (fairySec.rewards.total.logDateEnd ~= "" and fairySec.isRoughYearEnd() and
    fairySec:getOSTime(logDate) &gt; fairySec:getOSTime(fairySec.rewards.total.logDateEnd) - fairySec.HOUR_IN_SECONDS and
    fairySec:getOSTime(logDate) &lt; fairySec:getOSTime(fairySec.rewards.total.logDateEnd) + fairySec.HOUR_IN_SECONDS) then
  fairySec.rewards.total.logDateEnd = logDate
  fairySec.rewards.total.yearlyCredits = tonumber(yearlyCredits)
  fairySec:debug("setting logDateEnd "..logDate)
  fairySec:debug("setting yearlyCredits "..logDate)
elseif (fairySec.rewards.total.logDateEnd == logDate and not fairySec.isRoughYearEnd()) then
  -- presumes full end date is within log and both org and pointlog read
  raiseEvent("fairySecEndGatherLogs")
end
</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#aaff7f</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has been (awarded (\d+) credits for the yearly competition)</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>audit pointlog</name>
          <script>local logDate = matches[2]
local desc = matches[3]
local descLowercase = desc:lower()
local loggedActivity = {
  timestamp = logDate,
  desc = desc,
  trackedType = "audit",
  names = ""
}

fairySec:addActivity(loggedActivity)</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ffd700</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Won Village Revolt - the Village of \w+)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Participated in Village Revolt \- the Village of \w+)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored 50 points - (Directing a prize-winning production.*)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Submitted a stage production.*)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Won Aetherflare - (?:\w+\s?)+)$</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Participated in aetherflare - (?:\w+\s?)+)$</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Won Wildnodes)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Participated in Wildnodes)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Won Village Revolt - Ptoma Hive)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Participated in Village Revolt - Ptoma Hive)</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
            <integer>1</integer>
            <integer>0</integer>
            <integer>0</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
          </regexCodePropertyList>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>audit org</name>
          <script>local logDate = matches[2]
local desc = matches[3]
local descLowercase = desc:lower()
if not (string.find(descLowercase, "domoth:") or
    string.find(descLowercase, "revolts?:") or
    string.find(descLowercase, "flares?:") or
    string.find(descLowercase, "wilde?%s?nodes:")) then
  local loggedActivity = {
    timestamp = logDate,
    desc = desc,
    trackedType = "audit",
    names = ""
  }

  fairySec:addActivity(loggedActivity)
end
</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ffd700</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+ \&gt; .+)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+ communefavoured \w+ for: (?:[ 0-9A-Za-z,\(\)\.\:\-'])+)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+ has deposited .*)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+ donated .*)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+ activated a colossus .*)</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
            <integer>1</integer>
          </regexCodePropertyList>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>audit ikon reward</name>
          <script>local placeToType = 
{
  Winning = "ikonFirst",
  Second = "ikonSecond",
}

local loggedIkon = {
  uniqueId = matches[2].." "..placeToType[matches[4]],
  timestamp = matches[2],
  trackedType = placeToType[matches[4]],
  desc = desc,
  names = ""
}
fairySec:addActivity(loggedIkon)</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ffd700</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - (Taking (Second) in the Annual Ikon tournament)</string>
            <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d+ points - ((Winning) the Annual Ikon tournament)</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
            <integer>1</integer>
          </regexCodePropertyList>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>power minister tracking on</name>
          <script>local trackingYear = tonumber(fairySec.rewards.total.year)
if tonumber(multimatches[2][2]) == trackingYear then
  for _, uniqueId in ipairs(fairySec.db.orgPowerIds) do
    fairySec:deleteActivity(uniqueId)
  end
  fairySec.db.orgPowerIds = {}
  enableTrigger("fairySec power tally")
else
  disableTrigger("fairySec power tally")
end</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>2</conditonLineDelta>
          <mStayOpen>30</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>Yearly tallies for power and visitors</string>
            <string>(\d+)\s+Power\s+Bards\/Scholars</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>2</integer>
            <integer>1</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>fairySec power tally</name>
            <script>local timestamp = os.date("!%Y/%m/%d %H:%M:%S", getEpoch())
local name = matches[2]

if tonumber(matches[3]) &gt; 0 then
  local loggedMoonhartPower = {
    timestamp = timestamp,
    trackedType = "power",
    desc = "Moonhart - "..matches[3],
    names = name,
    uniqueId = timestamp.." "..name.."Moonhart".." power"
  }
  table.insert(fairySec.db.orgPowerIds, loggedMoonhartPower.uniqueId)
  fairySec:addActivity(loggedMoonhartPower)
end
if tonumber(matches[4]) &gt; 0 then
  local loggedVisitorPower = {
    timestamp = timestamp,
    trackedType = "power",
    desc = "Bards and Scholars - "..matches[4],
    names = name,
    uniqueId = timestamp.." "..name.."Visitor".." power"
  }
  table.insert(fairySec.db.orgPowerIds, loggedVisitorPower.uniqueId)
  fairySec:addActivity(loggedVisitorPower)
end</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>(\w+)\s*\-\s+(\d+)\s+(\d+)</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>power tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>empowered</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>0</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>empowered Aspect/Elemental tally</name>
            <script>-- fairySec:sendLogDate(matches[2]) -- convert date

local loggedPower = {
  timestamp = matches[2],
  trackedType = "power",
  desc = matches[4],
  names = matches[3]
}
fairySec:addActivity(loggedPower)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (\w+) (empowered (?:[ \/0-9A-Za-z,\(\)\.\-'])+)</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>quake tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>transparent</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>Participated in Timequake</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>0</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>timequake tally</name>
            <script>if fairySec:isWithinRewardYear(matches[2]) then
  fairySec:sendLogDate(matches[2]) -- convert date

  local loggedQuake = {
    timestamp = matches[2],
    trackedType = "timequake",
    desc = matches[3],
    names = matches[4]
  }
  fairySec:addActivity(loggedQuake)
end</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - (Participated in Timequake)\: ((?:\w+,?\s?)+(?:and \w+)?)\.$</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </TriggerGroup>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>domoth tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>transparent</mFgColor>
          <mBgColor>transparent</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>(P|p)articipated in (d|D)omoth</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>domoth tally</name>
            <script>if fairySec:isWithinRewardYear(matches[2]) then
  fairySec:sendLogDate(matches[2]) -- convert date
  
  local loggedDomoth = {
    timestamp = matches[2],
    trackedType = "domoth",
    desc = matches[3],
    names = matches[4]
  }
  fairySec:addActivity(loggedDomoth)
end</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ \&gt; ((?:p|P)articipated in (?:d|D)omoth(?: upgrade)? - \w+)\:\s*((?:\w+,?\s?)+(?:and \w+)?)\.$</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </TriggerGroup>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>revolt</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>(r|R)evolts?</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>revolt tally</name>
            <script>local loggedRevolt = {
  timestamp = matches[2],
  trackedType = "revolt",
  desc = matches[3],
  names = matches[4]
}
fairySec:addActivity(loggedRevolt)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ \&gt; Participated in ((?:[ \/0-9A-Za-z,\(\)\.\-'])+):\s*((?:\w+,?\s?)+(?:and \w+)?)\.$</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>aetherflare</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>(f|F)lare</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>aetherflare tally</name>
            <script>local loggedFlare = {
  timestamp = matches[2],
  trackedType = "aetherflare",
  desc = matches[3],
  names = matches[4]
}

fairySec:addActivity(loggedFlare)
</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ \&gt; Participated in ((?:[ \/0-9A-Za-z,\(\)\.\-'])+):\s*((?:\w+,?\s?)+(?:and \w+)?)\.$</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>other conquest tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>Participated in (w|W)ild</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>1</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>wild nodes tally</name>
            <script>local loggedConquest = {
  timestamp = matches[2],
  trackedType = "otherConquest",
  desc = "Wild Nodes",
  names = matches[3]
}
fairySec:addActivity(loggedConquest)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ \&gt; Participated in (?:w|W)ilde?\s?(?:n|N)odes\:\s*((?:\w+,?\s?)+(?:and \w+)?)\.$</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>design tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string> A design was approved</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>0</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>design tally</name>
            <script>local loggedDesign = {
  timestamp = matches[2],
  trackedType = "design",
  desc = matches[3],
  names = matches[4]
}
fairySec:addActivity(loggedDesign)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored \d points(?: with no gain)? - A design was approved for \w+ consumption - ((?:[A-Za-z,\-']\s?)+ \(\#\d+\)) by (\w+)</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </TriggerGroup>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>library stage tracking</name>
          <script></script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>0</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>Published</string>
            <string>Library Contest</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>0</integer>
            <integer>0</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>library tally</name>
            <script>local weight = matches[3]
local desc = matches[4]
local bookId = matches[5]
local author = matches[6]

local loggedLibrary = {
  timestamp = matches[2],
  trackedType = "library",
  desc = weight.." points - "..desc,
  names = author
}
fairySec:addActivity(loggedLibrary)
fairySec.db.orgCulture[bookId] = author</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored (\d+) points - Published a book.\s?\((#(\d+) - (\w+) - .*\))</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>library prestige tally</name>
            <script>local contestType = matches[3]
local desc = matches[4]
local bookId = matches[5]
local author = fairySec.db.orgCulture[bookId] 
if author == nil then author = "" end

local loggedLibrary = {
  uniqueId = matches[2].." library"..contestType.." library",
  timestamp = matches[2],
  trackedType = "library",
  desc = contestType.." Prestige - "..desc,
  names = author
}
fairySec:addActivity(loggedLibrary)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#aaff7f</mFgColor>
            <mBgColor>transparent</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) - \w+ has scored 50 points - Winning (\w+) Library Contest\s+\((#(\d+) - .*)\)</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
      </TriggerGroup>
      <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
        <name>fairySec set reward year date</name>
        <script>local lusternianDate = matches[2].." "..matches[3]
local lusternianYear = matches[4]
local logDate = matches[7].."\/"..string.format("%02d",matches[5]).."\/"..string.format("%02d",matches[6])..
  " "..string.format("%02d",matches[8])..matches[9]
fairySec:addConvertedDate(logDate, lusternianDate, lusternianYear)

if lusternianDate == "1 Estar" then
  if tonumber(lusternianYear) == fairySec.rewards.total.year then
    fairySec.rewards.total.logDateStart = logDate
    fairySec:debug("setting rough logDateStart "..logDate)
  elseif tonumber(lusternianYear) == fairySec.rewards.total.year + 1 then
    fairySec.rewards.total.logDateEnd = logDate
    fairySec:debug("setting rough logDateEnd "..logDate)
  end
 
  if fairySec.rewards.total.logDateStart ~= "" and fairySec.rewards.total.logDateEnd ~= "" then
    raiseEvent("fairySecSetYearStartEnd")
    disableTrigger("fairySec set reward year date")
  end
end</script>
        <triggerType>0</triggerType>
        <conditonLineDelta>0</conditonLineDelta>
        <mStayOpen>0</mStayOpen>
        <mCommand></mCommand>
        <packageName></packageName>
        <mFgColor>#ff0000</mFgColor>
        <mBgColor>#ffff00</mBgColor>
        <mSoundFile></mSoundFile>
        <colorTriggerFgColor>#000000</colorTriggerFgColor>
        <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList>
          <string> Lusternian date (\d+) (\w+), year (\d+) at midnight would be (\d+)\/(\d+)\/(\d{4}) at (\d+)(\:\d{2})</string>
        </regexCodeList>
        <regexCodePropertyList>
          <integer>1</integer>
        </regexCodePropertyList>
      </Trigger>
      <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
        <name>fairySec config</name>
        <script></script>
        <triggerType>0</triggerType>
        <conditonLineDelta>0</conditonLineDelta>
        <mStayOpen>0</mStayOpen>
        <mCommand></mCommand>
        <packageName></packageName>
        <mFgColor>#ff0000</mFgColor>
        <mBgColor>#ffff00</mBgColor>
        <mSoundFile></mSoundFile>
        <colorTriggerFgColor>#000000</colorTriggerFgColor>
        <colorTriggerBgColor>#000000</colorTriggerBgColor>
        <regexCodeList />
        <regexCodePropertyList />
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
          <name>pagelength</name>
          <script>deleteLine()
tempLineTrigger(1, 3, [[deleteLine()]])</script>
          <triggerType>0</triggerType>
          <conditonLineDelta>0</conditonLineDelta>
          <mStayOpen>5</mStayOpen>
          <mCommand></mCommand>
          <packageName></packageName>
          <mFgColor>#ff0000</mFgColor>
          <mBgColor>#ffff00</mBgColor>
          <mSoundFile></mSoundFile>
          <colorTriggerFgColor>#000000</colorTriggerFgColor>
          <colorTriggerBgColor>#000000</colorTriggerBgColor>
          <regexCodeList>
            <string>Pagelength is the maximum number of lines</string>
          </regexCodeList>
          <regexCodePropertyList>
            <integer>2</integer>
          </regexCodePropertyList>
          <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>fairySec set config page length</name>
            <script>fairySec.config.originalPageLength = matches[2]
disableTrigger("fairySec get config page length")</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
              <string>Your current pagelength: (\d+)</string>
            </regexCodeList>
            <regexCodePropertyList>
              <integer>1</integer>
            </regexCodePropertyList>
          </Trigger>
        </Trigger>
      </TriggerGroup>
    </TriggerGroup>
  </TriggerPackage>

  <AliasPackage>
    <AliasGroup isActive="yes" isFolder="yes">
      <name>Fairy Secretary</name>
      <script></script>
      <command></command>
      <packageName></packageName>
      <regex></regex>
      <Alias isActive="yes" isFolder="no">
        <name>fairySec commands</name>
        <script>local cmd = nil
local args = nil
if matches[2] ~= nil then
  cmd = string.lower(matches[2])
  if matches[3] ~= nil and string.trim(matches[3]) ~= "" then
    args = string.trim(matches[3])
  end
end

local function getActivityArgs(args)
  local uniqueId = nil
  local endIndex, uniqueAppend, timestamp, trackedType
  _, endIndex, timestamp = string.find(args, "(%d%d%d%d/%d%d/%d%d %d%d:%d%d%:%d%d)")
  if timestamp == nil then
    timestamp = os.date("!%Y/%m/%d %H:%M:%S", getEpoch())
    _, endIndex, uniqueAppend, trackedType = string.find(args, "(%w*)%s?%((%a+)%)%s+")
  else
    _, endIndex, timestamp, uniqueAppend, trackedType = string.find(args, "(%d%d%d%d/%d%d/%d%d %d%d:%d%d%:%d%d)%s+(%w*)%s?%((%a+)%)%s*")
  end
  if trackedType ~= nil then
    if string.trim(uniqueAppend) == "" then
      uniqueId = timestamp.." "..trackedType
    else
      uniqueId = timestamp.." "..string.trim(uniqueAppend).." "..trackedType
    end
  end
  if endIndex == nil then
    endIndex = 0
  end

  local descNames = string.split(string.sub(args, endIndex + 1), ":")
  local names = string.trim(table.remove(descNames, table.size(descNames)))
  if names == "" then names = nil end
  local desc = string.trim(table.concat(descNames)):title()
  if desc == "" then desc = nil end

  return timestamp, uniqueId, trackedType, desc, names
end

local function getGatherArgs(args)
  local year
  if args ~= nil then
    _, _, year = string.find(args, "[fF][oO][rR]%s*(%d+)%s*[cC][oO]?[eE]")
  end
  return year
end

local function getReportArgs(args)
  local person, endIndex, year, orgCredits
  if args ~= nil then
    _, endIndex, person = string.find(args, "%s*(%w+%s*)")
    if person == nil or string.trim(person:lower()) == "for" then
      person = "all"
      endIndex = 0
    else
      person = string.trim(person)
    end
    _, _, year = string.find(string.sub(args, endIndex + 1), "[fF][oO][rR]%s*(%d+)%s*[cC][oO]?[eE]")
    _, _, orgCredits = string.find(string.sub(args, endIndex + 1), "[wW][iI][tT][hH]%s*(%d+)%s*[cC][rR][eE][dD][iI][tT][sS]")
  else
    person = "all"
  end

  return person, year, orgCredits
end

if string.find(cmd, "help") then
  fairySec:showHelp()
elseif string.find(cmd, "instruct") then
  fairySec:showInstructions()
elseif cmd == "reset" then
  fairySec:reset()
  fairySec.rewards.total.year = ""
  fairySec.rewards.total.yearlyCredits = 0
elseif cmd == "save" then
  fairySec:save()
elseif cmd == "review" then
  fairySec.print:trackedActivities(args)
elseif (cmd == "add" or cmd == "update") and args ~= nil then
  local timestamp, uniqueId, trackedType, desc, names = getActivityArgs(args)
  local activity = {
    uniqueId = uniqueId,
    timestamp = timestamp,
    trackedType = trackedType,
    desc = desc,
    names = names,
  }
  if cmd == "update" then
    fairySec:updateActivity(activity, true)
  else
    fairySec:addActivity(activity, true)
  end
elseif (cmd == "remove" or cmd == "delete") and args ~= nil then
  local timestamp, uniqueId, trackedType, desc, names = getActivityArgs(args)
  fairySec:deleteActivity(uniqueId, true)
elseif cmd == "gather" then
  local year = getGatherArgs(args)
  if year ~= nil then
    fairySec:gather(tonumber(year)) -- gather records and determine orgCredits
  else
    echo("FAIRYSEC GATHER FOR &lt;year&gt; CE\n")
  end
elseif cmd == "report" then
  local person, year, orgCredits = getReportArgs(args)
  if orgCredits ~= nil then
    fairySec.rewards.total.year = tonumber(year)
    orgCredits = tonumber(orgCredits)
    fairySec.rewards.total.yearlyCredits = orgCredits
  else
    year = fairySec.rewards.total.year
    orgCredits = fairySec.rewards.total.yearlyCredits
  end
  if orgCredits ~= nil and orgCredits &gt; 0 then
    fairySec:debug("report "..person.." in "..year.." CE "..orgCredits.." credits")
  elseif year ~= nil then
    fairySec:debug("report "..person.." in "..year.." CE")
  else
    fairySec:debug("report "..person)
  end
  fairySec:report(person)
elseif cmd == "rewards" then
  fairySec.print:orgDistribution()
else
  fairySec.showIntro()
end</script>
        <command></command>
        <packageName></packageName>
        <regex>(?i)^f(?:airy)?s(?:ec)?\s*(\w+)?\s*(.*)$</regex>
      </Alias>
      <Alias isActive="yes" isFolder="no">
        <name>searchlog</name>
        <script>local args = nil
if matches[2] ~= nil and string.trim(matches[2]) ~= "" then
  args = string.trim(matches[2])
end
-- get search log args
local logName, weaveStart, weaveEnd, query

_, endIndex, logName, weaveStart, weaveEnd = string.find(args, "^(%w+)%s+(%d+)%s+(%d+)%s*")

if logName == "" then logName = nil end
if weaveStart == "" then weaveStart = nil end
if weaveEnd == "" then weaveEnd = nil end
if weaveEnd ~= nil then query = string.trim(string.sub(args, endIndex + 1)) end

-- search logs
if logName ~= nil and weaveStart ~= nil and weaveEnd ~= nil then
  fairySec:searchLog(logName, weaveStart, weaveEnd, query)
else
  fairySec:searchLogHelp()
end</script>
        <command></command>
        <packageName></packageName>
        <regex>(?i)^searchlog\s+(.*)$</regex>
      </Alias>
    </AliasGroup>
  </AliasPackage>

  <ScriptPackage>
    <ScriptGroup isActive="yes" isFolder="yes">
      <name>Fairy Secretary</name>
      <packageName></packageName>
      <script>if not fairySec then
  fairySec = {}
end</script>
      <eventHandlerList />
      <Script isActive="yes" isFolder="no">
        <name>fairySec variables</name>
        <packageName></packageName>
        <script>if not fairySec then
  fairySec = {}
end

fairySec.DAY_IN_SECONDS = 24 * 60 * 60
fairySec.HOUR_IN_SECONDS = 1 * 60 * 60


function fairySec:isGathering()
  return isActive("Fairy Secretary", "trigger") &gt; 0
end

function fairySec:isRoughYearStart()
  return string.len(fairySec.rewards.total.logDateStart) &lt; 19
end

function fairySec:isRoughYearEnd()
  return string.len(fairySec.rewards.total.logDateEnd) &lt; 19
end

fairySec.tracking = {
  ["types"] = {"audit", "leadership", "timequake", "domoth", "revolt", "aetherflare", "otherConquest",
    "design", "library", "stage",
    "power", "ikon"}
}

fairySec.db = fairySec.db or {["log"] = {}, ["convertedDate"] = {}}
  -- log for pulled logs
  -- convertedDate for holding log timestamp (year-first format) map to gameDate
if io.exists(getMudletHomeDir().."/fairySecTracking.lua") then
  table.load(getMudletHomeDir().."/fairySecTracking.lua", fairySec.db)
else
  table.save(getMudletHomeDir().."/fairySecTracking.lua", fairySec.db)
end

fairySec.loggedActivitySchema = {
  timestamp = nil,
  trackedType =  nil,
  desc =  nil,
  names = nil,
  uniqueId = nil -- make sure to define this in fairySec functions setNewActivity()
}</script>
        <eventHandlerList />
        <Script isActive="yes" isFolder="no">
          <name>org specific</name>
          <packageName></packageName>
          <script>--- org-specific rewards in terms of marks/credits
fairySec.rewards = {
  ["leadership"] = {["minister"] = 5, ["aide"] = 4, ["teacher"] = 4, ["trademaster"] = 5},
  ["timequake"] = 3,
  ["domoth"] = 5,
  ["revolt"] = 5,
  ["aetherflare"] = 5,
  ["otherConquest"] = 5,
  ["design"] = 15,
  ["empower"] = 10,
  ["ikonFirst"] = 15,
  ["ikonSecond"] = 10,
  ["ikonParticipation"] = 5,
}

if not fairySec.rewards.total then
  fairySec.rewards.total = {
    ["year"] = "",
    ["logDateStart"] = "",
    ["logDateEnd"] = "",
    ["yearlyCredits"] = 0,
    ["leadershipCredits"] = 0,
    ["memberMarks"] = 0,
    ["guildCredits"] = 0,
  }
end

fairySec.orgPolicy = {
  ["name"] = "Serenwilde",
  ["leader"] = "Xiran",
-- 'types' for key list in-order when iterating
  ["types"] = {"timequake", "conquest", "design", "culture", "power", "ikon"},
  ["labels"] = {
    ["leadership"] = "Leadership",
    ["timequake"] = "Timequakes",
    ["conquest"] = "Conquest Activities",
    ["design"] = "Designs",
    ["culture"] = "Library and Stage",
    ["power"] = "Power",
    ["ikon"] = "Ikon Tournament"
  },
  ["maxTimequakeReward"] = 36,
  ["revolt"] = {
    "Stewartsville",
    "Estelbar",
    "Acknor",
    "Delport",
    "Rockholm",
    "Southgard",
    "Angkrag",
    "Dairuchi",
    "Paavik",
    "Shanthmark",
    "Ptoma",
    "Ixthiaxa",
    "Rikenfriez",
    "Talthos"
  },
  ["revoltSet"] = { -- order within a set must match order in 'revolt'
    "Stewartsville/Delport",
    "Estelbar/Acknor",
    "Rockholm/Southgard/Angkrag/Ptoma/Ixthiaxa",
    "Dairuchi/Talthos",
    "Paavik/Shanthmark",
    "Rikenfriez",
  },
  ["aetherflare"] = {
    "Bottledowns",
    "Cankermore",
    "Crumkindivia",
    "Dramube",
    "Facility",
    "Mucklemarsh",
    "Xion",
    "Frosticia"
  },
  ["aetherflareSet"] = { -- order within a set must match order in 'aetherflare'
    "Bottledowns/Facility",
    "Cankermore/Dramube/Mucklemarsh",
    "Crumkindivia/Xion/Frosticia",
  }
}

if not fairySec.records then
  fairySec.records = {}
end

fairySec.recordSchema = {
  ["name"] = "",
  ["leadership"] = {},
  ["timequake"] = {},
  ["domoth"] = {},
  ["revolt"] = {},
  ["aetherflare"] = {},
  ["otherConquest"] = {},
  ["design"] = {},
  ["library"] = {},
  ["stage"] = {},
  ["power"] = {},
  ["ikon"] = {},
  ["subtotals"] = {
    ["timequake"] = 0,
    ["domoth"] = 0,
    ["conquest"] = 0,
    ["design"] = 0,
    ["culture"] = 0,
    ["power"] = 0,
    ["ikon"] = 0,
  }
}
-- each recorded activity under a type (timequake, domoth, etc.) is of schema
-- { ["formattedDesc"] = string, ["reward"] = number }

-- additional saved data specific to org
if not fairySec.db.orgPowerIds then
  fairySec.db.orgPowerIds = {}
end
if not fairySec.db.orgCulture then
  fairySec.db.orgCulture = {}
end
if not fairySec.db.tallyError then
  fairySec.db.tallyError = {}
end
if not fairySec.db.tallyWarning then
  fairySec.db.tallyWarning = {}
end</script>
          <eventHandlerList />
        </Script>
        <Script isActive="yes" isFolder="no">
          <name>config</name>
          <packageName></packageName>
          <script>if not fairySec.config then
  fairySec.config = {}
end

fairySec.config.showIcon = true
fairySec.config.color = "&lt;PaleGreen&gt;"
fairySec.config.warningColor = "&lt;gold&gt;"
fairySec.config.errorColor = "&lt;tomato&gt;"
fairySec.config.debug = true

-- fairySec.config.originalPageLength

fairySec.config.gatherLogsStartTime = 0.1
fairySec.config.gatherLogsEndTime = 0.4</script>
          <eventHandlerList />
        </Script>
      </Script>
      <Script isActive="yes" isFolder="no">
        <name>fairySec functions</name>
        <packageName></packageName>
        <script>function fairySec:showIntro()
  fairySec:showInstructions()
  fairySec:showIcon()
  echo("FAIRYSEC HELP\t - all commands\n");
  fairySec:showLogCmds()
end
 
function fairySec:showHelp()
  fairySec:showIcon()
  echo("FAIRYSEC INSTRUCTIONS - instructions for generating report\n"..
    "FAIRYSEC GATHER FOR &lt;year&gt; CE\n"..
    "FAIRYSEC REPORT [&lt;person&gt;|ALL] - show tally for org member or all of the org\n"..
    "FAIRYSEC RESET\t - reset gathered logs\n"..
    "FAIRYSEC REVIEW [search] - show the gathered logs\n"..
    "FAIRYSEC SAVE\t - save the gathered logs to a file\n"..
    "FAIRYSEC REWARDS - after running report, show syntax for distributing rewards to org members\n"..
    "\n")
    fairySec:showLogCmds()
end

function fairySec:showLogCmds()
  echo("FAIRYSEC ADD [timestamp] [uniqueAppend] (&lt;type&gt;) &lt;desc&gt;: &lt;names&gt;\n"..
    "FAIRYSEC UPDATE &lt;timestamp&gt; [uniqueAppend] (&lt;type&gt;) &lt;desc&gt;: &lt;names&gt;\n"..
    "FAIRYSEC DELETE &lt;timestamp&gt; [uniqueAppend] (&lt;type&gt;)\n"..
    "\t - modify log entries. Timestamp must be in format yyyy/mm/dd hh:mm:ss for GMT.\n"..
    "If adding a log entry, it defaults to the current GMT time.\n")
end

function fairySec:showInstructions()
  fairySec:showIcon()
  echo("Instructions:\n")
  echo("* If not already done, configure org-specific variables under 'fairySec variables' &gt; 'org specific'\n"..
      "1. FAIRYSEC GATHER FOR &lt;year&gt; CE, Ex.\n"..
      "\tFAIRYSEC GATHER FOR 672 CE\n"..
      "2. FAIRYSEC REVIEW [search] and modify log entries as needed.\n"..
      "3. If any entries are missing, read logs to compare. There is an alias to help with this.\n"..
      "\tSEARCHLOG &lt;log name&gt; &lt;start weave&gt; &lt;end weave&gt; [query], Ex.\n"..
      "\tSEARCHLOG SERENWILDE 21 8 timequake\n"..
      "4. FAIRYSEC REPORT\n"..
      "5. FAIRYSEC REWARDS\n")
  -- fairySec:showIcon()
  -- echo("For Coding:\n")
  -- echo("To update searching through logs, edit Triggers under Fairy Secretary\n")
  -- echo("To update display, edit Scripts: \n\t'fairySec print functions' and org specific variables\n")
  -- echo("To update rewards, edit Scripts: \n\t'fairySec tally functions' and org specific variables\n")
end


function fairySec:showGatherInstructions()
  fairySec:note("FAIRYSEC REVIEW [search] and modify log entries as needed with FAIRYSEC ADD or UPDATE")
  fairySec:note("FAIRYSEC REPORT")
  fairySec:note("FAIRYSEC REWARDS")
end

function fairySec:gather(year)
  fairySec:reset()
  fairySec.rewards.total.year = year

  enableTrigger("Fairy Secretary")
  enableTrigger("fairySec set reward year date")
  send("date 1 estar "..year.." ce")
  send("date 1 estar "..(year + 1).." ce")
end

function fairySec:report(person)
  if person ~= "all" and person ~= nil then
    fairySec.orgRecord:setRecordFor(person)
    fairySec.orgRecord:tallyTotalsFor(person)
    fairySec.print:person(person)
    fairySec:showIcon()
    fairySec.orgRecord:echoTallyErrorsAndWarnings()
  else -- all
    fairySec.orgRecord:setOrgRecords()
    fairySec.orgRecord:tallyOrgTotals(fairySec.rewards.total.yearlyCredits)
    fairySec.print:org()
    fairySec:showIcon()
    fairySec.orgRecord:echoTallyErrorsAndWarnings()
  end
end

function fairySec:reset()
  fairySec.db.log = {}
  fairySec.db.convertedDate = {}
  disableTrigger("Fairy Secretary")
  if io.exists(getMudletHomeDir().."/fairySecTracking.lua") then
    table.save(getMudletHomeDir().."/fairySecTracking.lua", fairySec.db)
  end
  fairySec:note("reset fairysec db", "x")
  fairySec.records = {}
  fairySec.rewards.total.year = ""
  fairySec.rewards.total.logDateStart = ""
  fairySec.rewards.total.logDateEnd = ""
  fairySec.orgRecord:clearTallyErrorsAndWarnings()
end

function fairySec:save()
  if io.exists(getMudletHomeDir().."/fairySecTracking.lua") then
    table.save(getMudletHomeDir().."/fairySecTracking.lua", fairySec.db)
  end
  fairySec:note("saved fairysec db to file", "x")
end

local function setNewActivity(loggedActivity)
  local newActivity = table.deepcopy(fairySec.loggedActivitySchema)

  if loggedActivity ~= nil then
    newActivity = {
      uniqueId = loggedActivity.uniqueId,
      timestamp = loggedActivity.timestamp,
      trackedType = loggedActivity.trackedType,
      desc = loggedActivity.desc,
      names = loggedActivity.names,
    }
  end
  if newActivity.uniqueId == nil then 
    newActivity.uniqueId = newActivity.timestamp.." "..newActivity.trackedType
  end
 
  fairySec:debug("new activity = { \n"..
    "uniqueId = "..newActivity.uniqueId..", \n"..
    "timestamp = "..newActivity.timestamp..", \n"..
    "trackedType = "..newActivity.trackedType..", \n"..
    "desc = "..newActivity.desc..", \n"..
    "names = "..newActivity.names.." }\n");

  return newActivity
end

function fairySec:hasActivity(activity) 
  return fairySec.db.log[activity.uniqueId] ~= nil
end

function fairySec:isWithinRewardYear(logDate)
  if fairySec.isGathering() and
    fairySec.rewards.total.logDateStart ~= "" and
    fairySec.rewards.total.logDateEnd ~= "" and
    ((not fairySec.isRoughYearStart() and logDate &lt; fairySec.rewards.total.logDateStart) or
    (not fairySec.isRoughYearEnd() and logDate &gt; fairySec.rewards.total.logDateEnd)) then
    return false
  else
    return true
  end
end

function fairySec:_addActivity(loggedActivity, operation, showConfirmation)
  if loggedActivity.desc == nil then
    fairySec:error("desc of activity required")
  else
    if loggedActivity.timestamp == nil then
      loggedActivity.timestamp = os.date("!%Y/%m/%d %H:%M:%S", getEpoch())
      fairySec:debug("timestamp required on activity: "..loggedActivity.desc.."\n"..
      "using timestamp: "..loggedActivity.timestamp.."\n")
    end
    if loggedActivity.trackedType == nil then
      fairySec:error("trackedType required on activity: "..loggedActivity.desc)
    elseif table.contains(fairySec.tracking.types, loggedActivity.trackedType) == false and
        -- exception for "power(%w) of person's name"
        not string.find(loggedActivity.trackedType, loggedActivity.names) then
      fairySec:error("unrecognised trackedType of "..loggedActivity.trackedType.." on activity: "..loggedActivity.desc)
    elseif loggedActivity.names == nil then
      fairySec:error("names required on activity: "..loggedActivity.desc)
    elseif not fairySec:isWithinRewardYear(loggedActivity.timestamp) and
        loggedActivity.uniqueId ~= nil and
        not string.find(loggedActivity.uniqueId, "Moonhart power") and
        not string.find(loggedActivity.uniqueId, "Visitor power") then
      fairySec:debug("loggedActivity occuring outside "..fairySec.rewards.total.logDateStart.." to "..fairySec.rewards.total.logDateEnd..": "..loggedActivity.desc)
    else
      local activity = setNewActivity(loggedActivity)
 
      if operation == "add" and fairySec:hasActivity(activity) then
          fairySec:error("log activity with uniqueId [\""..activity.uniqueId.."\"] already exists.\n"..
            "Please use FAIRYSEC UPDATE to replace or FAIRYSEC DELETE to remove the activity")
      elseif operation == "update" and not fairySec:hasActivity(activity) then
          fairySec:error("log activity with uniqueId [\""..activity.uniqueId.."\"] does not exist.\n"..
            "Please use FAIRYSEC ADD to insert the activity")
      else
        if operation == "add" and not fairySec:isGathering() and
            (loggedActivity.trackedType == "timequake" or loggedActivity.trackedType == "domoth") then
          if (loggedActivity.timestamp &lt; fairySec.rewards.total.logDateStart or loggedActivity.timestamp &gt; fairySec.rewards.total.logDateEnd) then
            fairySec:error("log activity with uniqueId [\""..activity.uniqueId.."\"] is outside of gathered year.\n"..
              "Please use FAIRYSEC ADD &lt;log date within year&gt; ("..loggedActivity.trackedType..") &lt;description&gt;: &lt;names&gt; to insert the activity")
            return
          else
            enableTrigger("Fairy Secretary")
            fairySec:sendLogDate(loggedActivity.timestamp) -- convert date
            tempTimer(fairySec.config.gatherLogsStartTime,
              function()
                disableTrigger("Fairy Secretary")
              end
            )
          end
        end

        if showConfirmation and operation == "add" then
          fairySec:note("added log activity with uniqueId [\""..activity.uniqueId.."\"]")
        elseif showConfirmation and operation == "update" then
          fairySec:note("updated log activity with uniqueId [\""..activity.uniqueId.."\"]")
        elseif operation == "update" then
          fairySec:debug("updated log activity with uniqueId [\""..activity.uniqueId.."\"]")
        else
          fairySec:debug("added log activity with uniqueId [\""..activity.uniqueId.."\"]")
        end

        fairySec.db.log[activity.uniqueId] = activity          
      end
    end
  end
end

function fairySec:addActivity(loggedActivity, showConfirmation)
  return fairySec:_addActivity(loggedActivity, "add", showConfirmation)
end

function fairySec:updateActivity(activity, showConfirmation)
  if activity.uniqueId == nil then
    fairySec:error("log activity must be identified by uniqueId for update")
  elseif fairySec.db.log[activity.uniqueId] then
    fairySec:_addActivity(activity, "update", showConfirmation)
  else
    fairySec:error("log activity with uniqueId [\""..activity.uniqueId.."\"] does not exist for update")
  end
end

function fairySec:deleteActivity(uniqueId, showConfirmation)
  if fairySec.db.log[uniqueId] then
    fairySec.db.log[uniqueId] = nil
    if showConfirmation then
      fairySec:note("deleted log activity with uniqueId [\""..uniqueId.."\"]")
    else
      fairySec:debug("deleted log activity with uniqueId [\""..uniqueId.."\"]")
    end
  else
    fairySec:error("log activity with uniqueId [\""..uniqueId.."\"] does not exist for deletion")
  end
end</script>
        <eventHandlerList />
        <Script isActive="yes" isFolder="no">
          <name>fairySec message functions</name>
          <packageName></packageName>
          <script>local function note(message, icon, color)
  if icon == nil then
    icon = " "
  end
  if color == nil then
    color = fairySec.config.color
  end
  cecho("\n"..color.."["..icon.."] "..message)  
end

function fairySec:warningMemberNotFound(name)
  return fairySec:warning("Member by name of "..name:title().." not found")
end

function fairySec:note(message, icon)
  return note(message, icon)
end

function fairySec:warning(message)
  return note(message, "?", fairySec.config.warningColor)
end

function fairySec:error(message)
  return note(message, "!", fairySec.config.errorColor)
end

function fairySec:debug(message)
  if fairySec.config.debug then
    debugc(message)
  end
end</script>
          <eventHandlerList />
        </Script>
        <Script isActive="yes" isFolder="no">
          <name>fairySec icon functions</name>
          <packageName></packageName>
          <script>function fairySec:showIcon()
  if fairySec.config.showIcon then
    fairySec:showButterfly() -- call different icons!
  end
end

function fairySec:showButterfly()
  cecho(fairySec.config.color.."{\\w/}\n"..
    "(/:\\)\n")
end

function fairySec:showAngel()
  cecho(fairySec.config.color.."  _\n"..
    "{\\o/}\n"..
    " /*\\\n")
end 
  
function fairySec:showImp()
  cecho(fairySec.config.color.." 'o'U\n"..
    " mg^|\n")
end

function fairySec:showWakabi()
  cecho(fairySec.config.color.." 4Q'\n"..
    " (&amp;\\&gt;\n"..
    "  |l\n")
end

function fairySec:showShulamitWakabi()
  cecho("&lt;blue&gt;     n\n"..
"&lt;white&gt;  __('&gt;\n"..
"z(__&gt;)\n"..
" // ||\n"..
" mm mm\n")
end</script>
          <eventHandlerList />
        </Script>
        <Script isActive="yes" isFolder="no">
          <name>fairySec log utility functions</name>
          <packageName></packageName>
          <script>-- log utility functions

function fairySec:sendLogDate(logDate)
  local gmtDate = string.gsub(logDate, "(%d+)/(%d+/%d+) (%d+)", "%2/%1 %3")
  send("date "..gmtDate)
end

function fairySec:addConvertedDate(logDate, gameDate, gameYear)
  fairySec.db.convertedDate[logDate] = { ["date"] = gameDate, ["year"] = gameYear }
  local gameDate = fairySec.db.convertedDate[logDate]
  fairySec:debug("adding convertedDate "..logDate.." = { date = "..gameDate.date..", year = "..gameDate.year.." }")
  
  return gameDate
end

function fairySec:getOSTime(logDate)
  local _, _, year, month, day, hour, min = string.find(logDate, "(%d%d%d%d)/(%d%d)/(%d%d) (%d%d):(%d%d)")
  local time = os.time({
    year = tonumber(year), 
    month = tonumber(month),
    day = tonumber(day),
    hour = tonumber(hour),
    min = tonumber(min)
  })
  -- fairySec:debug("os.time of "..time.." = { "..
  --   "year = "..year..", month = "..month..", day = "..day..", hour = "..hour..", min = "..min..
  --   " }")
  return time
end

function fairySec:getGameDate(logDate)
  if not table.contains(fairySec.db.convertedDate, logDate) then
    fairySec:error(logDate.." not found in coverted dates\n")
  end
  return fairySec.db.convertedDate[logDate].date
end

function fairySec:getParty(participatingString)
  local members = {}

  participatingString = string.gsub(participatingString, ",? and ", ", ", 1)..", "
  for name in string.gmatch(participatingString, "([^, ]+)") do
    table.insert(members, name)
  end

  return members
end

function fairySec:searchLogHelp()
  echo("SEARCHLOG &lt;log&gt; &lt;oldWeave&gt; &lt;recentWeave&gt; [search]\n")
  echo("ex. SEARCHLOG POINTLOG 30 0 design\n")
end

function fairySec:searchLog(logName, weaveStart, weaveEnd, query)

  local searchLogCmd, searchWeaveCmd
  local allWeavesCmdList = {}
  
  if logName == "power" or logName == "powerlog" then
    searchLogCmd = "powerlog"
  elseif logName == "point" or logName == "pointlog" then
    searchLogCmd = "pointlog"
  elseif logName == "shop" or logName == "shoplog" then
    searchLogCmd = "shoplog"
  elseif logName == "rev" or logName == "revlog" then
    searchLogCmd = "revlog"
  else
    searchLogCmd = "readlog "..logName
  end

  if weaveStart and weaveEnd then
    weaveStart = tonumber(weaveStart)
    weaveEnd = tonumber(weaveEnd)
    if weaveStart &lt; weaveEnd then
       echo("oldWeave should be greater than recentWeave.\n")
       fairySec:searchLogHelp()
       return
    end
  end
  
  searchWeaveCmd = searchLogCmd.." 0 "..weaveStart
  if query then
    searchWeaveCmd = searchWeaveCmd.." "..query
  end
  table.insert(allWeavesCmdList, searchWeaveCmd)
  weaveStart = weaveStart - 1
  
  local index
  for index = weaveStart, weaveEnd,-1 do
    searchWeaveCmd = searchLogCmd.." 0 "..index
    if query then
      searchWeaveCmd = searchWeaveCmd.." "..query
    end
    table.insert(allWeavesCmdList, searchWeaveCmd)
  end

  send(table.concat(allWeavesCmdList, getCommandSeparator()))
end</script>
          <eventHandlerList />
        </Script>
        <Script isActive="yes" isFolder="no">
          <name>fairySec print functions</name>
          <packageName></packageName>
          <script>-- print functions
if not fairySec.print then
  fairySec.print = {}
end

-- helper function concatentating activity for text search
local function concatActivity(activity)
  return activity.uniqueId.." "..
    activity.timestamp.." "..
    activity.trackedType.." "..
    activity.desc.." "..
    activity.names
end

-- print of tracked activities on FAIRYSEC REVIEW
function fairySec.print:trackedActivities(searchQuery)
  local trackedActivities = fairySec.db.log
  local year = fairySec.rewards.total.year
  if year == nil or year == "" then
    year = "--"
  else
    year = year.." CE"
  end
  local showQuery = ""
  if searchQuery ~= nil then
    showQuery = " with "..searchQuery
  end
  echo("=================================\n"..
    "= Tracked Activities for "..year..showQuery.." =\n"..
    "=================================\n"..
    "\n")

  if trackedActivities ~= nil then    
    for _, activity in spairs(trackedActivities) do
      if searchQuery == nil or string.find(concatActivity(activity):lower(), searchQuery:lower()) then
        -- assumes trackedType appended at end
        local idSplit = activity.uniqueId:split(" ")
        table.remove(idSplit, idSplit[size])
        local id = table.concat(idSplit, " ")
        local names = activity.names
        if names ~= "" then
          names = ": "..names
        end
        echo(id.." ")
        if names == "" or activity.trackedType == "audit" then
          cecho(fairySec.config.warningColor.."{"..activity.trackedType.."}")
        else
          cecho(fairySec.config.color.."("..activity.trackedType..")")
        end
        echo(" "..activity.desc..names.."\n")
      end
    end
  end
  echo("====End of Tracked Activities====\n\n")
end

-- org-specific print functions for FAIRYSEC REPORT
function fairySec.print:org(asSummary)
  fairySec.print:header(fairySec.rewards.total)
  echo("\n")
  fairySec.print:leadershipRewards(fairySec.rewards.total)
  fairySec.print:hr()
  for name, record in spairs(fairySec.records) do
    if (fairySec.orgRecord:getTotal(record) &gt; 0) then
      fairySec.print:record(record, asSummary)
      fairySec.print:hr()
    end
  end
  fairySec.print:footer(fairySec.rewards.total)
end

function fairySec.print:hr()
  echo("-----\n\n")
end

function fairySec.print:header(total)
  local year = total.year
  if year == nil or year == "" then
    year = "--"
  else
    year = year.." CE"
  end
  echo("=================================\n"..
    "= Distribution Marks for "..year.." =\n"..
    "=================================\n"..
    "\n")

  echo("--------------\n"..
    "Commune Wide -\n"..
    "--------------\n")
  echo("Total CMR = "..total.memberMarks.."\n"..
    "Yearly Credits Earned = "..total.yearlyCredits.."\n\n")
  fairySec.print:creditsPerGuild(total.yearlyCredits)
  echo((total.yearlyCredits * 0.81).." credits for individual distribution\n")
  if fairySec.orgRecord:isPercentageDistribution() then
    echo("exceeds 81% of yearly credits, switching to percentage distribution\n")
  end
end

-- print credits for each guild
function fairySec.print:creditsPerGuild(yearlyCredits)
  local credits = fairySec.orgRecord:creditsPerGuild(yearlyCredits)
  if credits == 0 then
    credits = " --"
  else
    credits = tostring(credits)
  end
  echo(string.format("%3d", credits).." credits (%3) to -each- guild\n")
end

-- print credits for leadership
function fairySec.print:leadershipRewards(total)
  echo("--------------\n"..
    "- Leadership -\n"..
    "--------------\n")
  local subtotal = 0
  for name, record in spairs(fairySec.records) do
    subtotal = fairySec.orgRecord:tallyLeadershipSubTotalOf(record)
    if (subtotal &gt; 0) then      
      echo(string.format("%2d", subtotal).." to "..record.name)
      for _, activity in ipairs(record.leadership) do
        echo(", "..activity.formattedDesc)
      end
      echo("\n")
    end
  end

  echo(string.format("\n".."%2d credits paid to leadership\n", total.leadershipCredits))
end

-- print by person's name 
function fairySec.print:person(name, asSummary)
  local record = fairySec.records[name]
  if record ~= nil then
    fairySec.print:record(record, asSummary)
  else
    fairySec:warningMemberNotFound(name)
  end
end

-- local functions, customise to match orgRecord functions
local function printTypesIn(record, typeSet)
  for _, type in ipairs(typeSet) do
    for _, activity in ipairs(record[type]) do
      echo(activity.formattedDesc.."\n")
    end
  end
end
-- end local functions

-- print by record
function fairySec.print:record(record)
  echo("Commune Member: "..record.name.."\n"..
  "\n")
  for _, type in ipairs(fairySec.orgPolicy.types) do
    if (fairySec.orgRecord:getSubTotal(type, record) &gt; 0) then
      echo(fairySec.orgPolicy.labels[type]..":\n")
      if type == "conquest" then
        printTypesIn(record, {"revolt", "domoth", "aetherflare", "otherConquest"})
      elseif type == "culture" then
        printTypesIn(record, {"library", "stage"})
      else
        for _, activity in ipairs(record[type]) do
          echo(activity.formattedDesc.."\n")
        end
      end
      if type == "timequake" and fairySec.orgRecord:getSubTotal(type, record) == fairySec.orgPolicy.maxTimequakeReward then
        echo("Sub-Total CMR = "..fairySec.orgRecord:getSubTotal(type, record).." (max)\n\n")
      else
        echo("Sub-Total CMR = "..fairySec.orgRecord:getSubTotal(type, record).."\n\n")
      end
    end
  end
  local personCMR = fairySec.orgRecord:getTotal(record)
  local personCredits = personCMR
  local total = fairySec.rewards.total
  if fairySec.orgRecord:isPercentageDistribution() then
    personCredits = math.ceil((personCMR / total.memberMarks) * (total.yearlyCredits * 0.81))
    echo("Total CMR = "..personCMR.."\n")
    echo(personCredits.." credits = ("..personCMR.." CMR / "..total.memberMarks.." CMR) * "..(total.yearlyCredits * 0.81).." credits\n")
  else
    echo("Total Credits = "..personCredits.." credits\n")
  end
end

function fairySec.print:footer(total)
  local formattedLeadershipCredits = " --"
  if total.leadershipCredits &gt; 0 then
    formattedLeadershipCredits = string.format("%3d", total.leadershipCredits)
  end
  echo(formattedLeadershipCredits.." credits to Leadership\n")

  local formattedGuildCredits = " --"
  if total.guildCredits &gt; 0 then
    formattedGuildCredits = string.format("%3d", total.guildCredits)
  end
  echo(formattedGuildCredits.." credits to Guilds\n")

  local formattedMemberCredits = " --"
  local totalMemberCredits = 0
  if total.yearlyCredits &gt; 0 then
    if fairySec.orgRecord:isPercentageDistribution() then
      for _, record in spairs(fairySec.records) do
        local personCMR = fairySec.orgRecord:getTotal(record)
        totalMemberCredits = totalMemberCredits + math.ceil((personCMR / total.memberMarks) * (total.yearlyCredits * 0.81))
      end
    else
      totalMemberCredits = total.memberMarks
    end
    formattedMemberCredits = tostring(totalMemberCredits)
  end
  echo(formattedMemberCredits.." credits to Members\n")

  echo("---\n")
  echo(tostring(totalMemberCredits + total.leadershipCredits + total.guildCredits).." Total Distributed\n")
end
-- end org-specific print functions for FAIRYSEC REPORT

-- org-specific print functions for FAIRYSEC REWARDS
function fairySec.print:orgDistribution()
  local total = fairySec.rewards.total
  -- anomalies
  local names = {};
  for name, record in spairs(fairySec.records) do
    local subtotal = fairySec.orgRecord:tallyTimequakeSubTotalOf(record)
    if (subtotal &gt; 0) then
      table.insert(names, record.name)
    end
  end
  echo("WRITELOG SERENWILDE -"..#names.." free scarlet anomalies distributed for "..total.year.." CE timequakes: "..table.concat(names, ", ").."\n")
  echo("\n")

  -- leadership
  for name, record in spairs(fairySec.records) do
    local subtotal = fairySec.orgRecord:tallyLeadershipSubTotalOf(record)
    if (subtotal &gt; 0) then
      echo("COMMUNE CREDITS TRANSFER "..subtotal.." to "..record.name.. " "..total.year.." CE, serving as ")
      for i, activity in ipairs(record.leadership) do
        echo(activity.formattedDesc)
        if (i &lt; #record.leadership) then echo(", ") end
      end
      echo("\n")
    end
  end
  echo("See CHELP LEADERSHIP.\n\n")

  -- individual
  for _, record in spairs(fairySec.records) do
    local personCMR = fairySec.orgRecord:getTotal(record)
    local personCredits = personCMR
    if fairySec.orgRecord:isPercentageDistribution() then
      personCredits = math.ceil((personCMR / total.memberMarks) * (total.yearlyCredits * 0.81))
    end
    echo("COMMUNE CREDITS TRANSFER "..personCredits.." TO "..record.name.." "..total.year.." CE service\n")
  end
  -- guild
  echo("COMMUNE CREDITS TRANSFER "..total.guildCredits.." TO "..fairySec.orgPolicy.leader.." "..total.year.." CE guild distribution. See CHELP YEARLYCREDITS and PROJECT 520. Thank you!\n")
end</script>
          <eventHandlerList />
        </Script>
        <Script isActive="yes" isFolder="no">
          <name>fairySec tally functions</name>
          <packageName></packageName>
          <script>-- org-specific record functions
if not fairySec.orgRecord then
  fairySec.orgRecord = {}
end

function fairySec.orgRecord:createRecordFor(name)
  local record = table.deepcopy(fairySec.recordSchema)

  record.name = name:title()
  fairySec.records[name:lower()] = record
  
  return record
end

local function updateRecordWithActivity(record, activity)
  if activity.trackedType ~= "audit" then
    local formattedDesc, reward = fairySec.orgRecord:getFormattedStringAndReward(activity)
    local trackedType = activity.trackedType
    if string.find(activity.trackedType, "ikon") then
      trackedType = "ikon"
    end
    
    if not table.contains(record[trackedType], formattedDesc) then
      table.insert(record[trackedType],
        {["formattedDesc"] = formattedDesc, ["reward"] = reward}
      )
    end
  end
end

-- set record for all in org
function fairySec.orgRecord:setOrgRecords()
  local trackedActivities = fairySec.db.log
  local names = {}
  local record = {}
  
  fairySec.orgRecord:clearTallyErrorsAndWarnings()
  fairySec.records = {}
  if trackedActivities ~= nil then
    for _, activity in spairs(trackedActivities) do
      names = fairySec:getParty(activity.names)
      for _, name in ipairs(names) do
        record = fairySec.records[name:lower()]
        if record == nil then
          record = fairySec.orgRecord:createRecordFor(name)
        end
        updateRecordWithActivity(record, activity)
      end
    end
  end
end
-- set record only for one by name
function fairySec.orgRecord:setRecordFor(name)
  local titleName = name:title()
  local trackedActivities = fairySec.db.log

  fairySec.orgRecord:clearTallyErrorsAndWarnings()
  if trackedActivities ~= nil then
    local record = fairySec.orgRecord:createRecordFor(name)
    for _, activity in spairs(trackedActivities) do
      if table.contains(fairySec:getParty(activity.names), titleName) then
        updateRecordWithActivity(record, activity)
      end
    end
  end
end

-- org-specific formatting functions
local function getTallyOfLeadership(activity)
  local formattedString = activity.desc
  
  local reward
  if string.find(activity.desc, "[tT]each") then
    reward = fairySec.rewards.leadership.teacher
  elseif string.find(activity.desc, "[aA]ide") then
    reward = fairySec.rewards.leadership.aide
  elseif string.find(activity.desc, "Minister") or
    string.find(activity.desc, "Treasurer") or 
    string.find(activity.desc, "Steward") or 
    string.find(activity.desc, "Chancellor") or
    string.find(activity.desc, "Librarian") then
    reward = fairySec.rewards.leadership.minister
  elseif string.find(activity.desc, "Trademaster") then
    reward = fairySec.rewards.leadership.trademaster
  else
    fairySec.orgRecord:addWarning(activity.uniqueId, activity.timestamp.." ("..activity.trackedType..") not in expected format\n"..
      "\t"..activity.desc..": "..activity.names.."\n"..
      "FAIRYSEC UPDATE ACTIVITY "..activity.timestamp.." ("..activity.trackedType..") &lt;updated desc&gt;: "..activity.names.." and re-run report as needed. If the listed spheres are correct, add 'audited' to the updated description to remove this warning."
    )
  end

  return formattedString, reward
end

local function getTallyOfTimequake(activity)
  local formattedString = fairySec:getGameDate(activity.timestamp)
  local reward = fairySec.rewards.timequake
  
  return formattedString, reward
end

local function getTallyOfDomoth(activity)
  local _, _, monthName = string.find(fairySec:getGameDate(activity.timestamp), "%d+ (%w+)")
  local _, _, throne = string.find(activity.desc, "%- (%w+)")
  local formattedString = "Domoth - "..throne:title().." ("..monthName..")"
  local reward = fairySec.rewards.domoth
  
  return formattedString, reward
end

-- Seren-specific, rewards based on number of spheres of revolt or aetherflare
local function getTallyOfSpheres(activity)
  local formattedString = ""
  local reward = 0

  local trackedType = activity.trackedType
  local descLowercase = activity.desc:lower()
  local spheres = {}
  local sphereSet = ""
  formattedString = trackedType:title().." - "
  for _, sphere in ipairs(fairySec.orgPolicy[trackedType]) do
    if string.find(descLowercase, sphere:lower()) then
      table.insert(spheres, sphere)
    end
  end
  if spheres[1] == "Rikenfriez" then
    reward = 5
  else
    reward = table.size(spheres) * fairySec.rewards[trackedType]
  end
  sphereSet = table.concat(spheres, "/")
  formattedString = formattedString..sphereSet
  if reward == 0 or (not table.contains(fairySec.orgPolicy[trackedType.."Set"], sphereSet) and not string.find(descLowercase, "audited")) then
    fairySec.orgRecord:addWarning(activity.uniqueId, activity.timestamp.." ("..trackedType..") may not have all spheres in desc\n"..
      "\t"..activity.desc..": "..activity.names.."\n"..
      "FAIRYSEC UPDATE ACTIVITY "..activity.timestamp.." ("..trackedType..") &lt;updated desc&gt;: "..activity.names.." and re-run report as needed. If the listed spheres are correct, add 'audited' to the updated description to remove this warning."
    )
  end
  
  return formattedString, reward
end

local function getTallyOfOtherConquest(activity)
  local formattedString = activity.desc
  local reward = fairySec.rewards.otherConquest
  
  return formattedString, reward
end

local function getTallyOfDesign(activity)
  local formattedString = activity.desc
  local reward = fairySec.rewards.design

  return formattedString, reward
end

local function getTallyOfLibrary(activity)
  local formattedString = ""
  local reward = 0
   
  local prestigeType, points, bookId, title 
  _, _, points, bookId, title = string.find(activity.desc, "(%d+) points %- #(%d+) %- %w+ %- (.*)$")
  if points then
    reward = tonumber(points) * 4
    formattedString = "'"..title.."' (#"..bookId..") - "..reward
  else
    _, _, prestige, bookId, title = string.find(activity.desc, "(%w+ Prestige) %- #(%d+) %- (.*)$")      
    if prestige then
      reward = 60
      formattedString = prestige.." - '"..title.."' (#"..bookId..") - "..reward
    end
  end
  if points == nil and prestige == nil then
    fairySec.orgRecord:addError(activity.uniqueId, activity.timestamp.." ("..activity.trackedType..") "..activity.desc..": "..activity.names.." not in expected format for fairySec.orgRecord:getFormattedStringAndReward()")
  end

  return formattedString, reward
end

local function getTallyOfPower(activity)
  local formattedString = ""
  local reward = 0
   
  if string.find(activity.desc, "empowered") then
    formattedString = activity.desc
    reward = fairySec.rewards.empower -- empowered aspect
  else
    _, _, reward = string.find(activity.desc, "- (%d+)")
    if reward ~= nil then
      formattedString = activity.desc
      reward = tonumber(reward)
    else
      fairySec.orgRecord:addError(activity.uniqueId, activity.timestamp.." ("..activity.trackedType..") "..activity.desc..": "..activity.names.." not in expected format for fairySec.orgRecord:getFormattedStringAndReward()")
    end
  end

  return formattedString, reward
end

local function getTallyOfIkon(activity)
  local formattedString = ""
  local reward = fairySec.rewards[activity.trackedType]
   
  if reward ~= nil then
    formattedString = activity.desc
    reward = tonumber(reward)
  else
    fairySec.orgRecord:addError(activity.uniqueId, activity.timestamp.." ("..activity.trackedType..") "..activity.desc..": "..activity.names.." not in expected format for fairySec.orgRecord:getFormattedStringAndReward()")
  end

  return formattedString, reward
end
-- end org-specific formatting functions

-- get formatted string and reward of a given activity
function fairySec.orgRecord:getFormattedStringAndReward(activity)
  local formattedString = ""
  local reward = 0

  local trackedType = activity.trackedType
  if activity.trackedType == "leadership" then
    formattedString, reward = getTallyOfLeadership(activity)
  elseif activity.trackedType == "timequake" then
    formattedString, reward = getTallyOfTimequake(activity)
  elseif trackedType == "domoth" then
    formattedString, reward = getTallyOfDomoth(activity)
  elseif trackedType == "revolt" or trackedType == "aetherflare" then
    formattedString, reward = getTallyOfSpheres(activity)
  elseif trackedType == "otherConquest" then
    formattedString, reward = getTallyOfOtherConquest(activity)
  elseif trackedType == "design" then
    formattedString, reward = getTallyOfDesign(activity)
  elseif trackedType == "library" then
    formattedString, reward = getTallyOfLibrary(activity)
  elseif trackedType == "power" then
    formattedString, reward = getTallyOfPower(activity)
  elseif string.find(trackedType, "ikon") then
    formattedString, reward = getTallyOfIkon(activity)
  else
    fairySec.orgRecord:addError(activity.uniqueId, "type "..trackedType.." not supported for fairySec.orgRecord:getFormattedStringAndReward()")
  end
  if formattedString == nil then
    fairySec:debug(activity.timestamp.." "..trackedType..reward)
  end
  return formattedString, reward
end

-- tally
function fairySec.orgRecord:tallyOrgTotals(yearlyCredits)
  fairySec.rewards.total.guildCredits = fairySec.orgRecord:creditsPerGuild(yearlyCredits) * 3

  local memberMarks = 0
  local leadershipCredits = 0
  for name, record in pairs(fairySec.records) do
    fairySec.orgRecord:tallyTotalsOf(record)
    memberMarks = memberMarks + record.total
    leadershipCredits = leadershipCredits + fairySec.orgRecord:tallyLeadershipSubTotalOf(record)
  end
  fairySec.rewards.total.memberMarks = memberMarks
  fairySec.rewards.total.leadershipCredits = leadershipCredits
end

function fairySec.orgRecord:creditsPerGuild(yearlyCredits)
  if yearlyCredits ~= nil then
    return yearlyCredits * 0.03
  else
    return 0
  end
end

function fairySec.orgRecord:tallyTotalsFor(name)
  local record = fairySec.records[name]
  if record ~= nil then
    fairySec.orgRecord:tallyTotalsOf(record)
  else
    fairySec:warningMemberNotFound(name)
  end
end

function fairySec.orgRecord:tallyTotalsOf(record)
  -- leadership is considered separate category from individual rewards 
  fairySec.orgRecord:tallyTimequakeSubTotalOf(record)
  fairySec.orgRecord:tallyDomothSubTotalOf(record)
  fairySec.orgRecord:tallyConquestSubTotalOf(record)
  fairySec.orgRecord:tallyDesignSubTotalOf(record)
  fairySec.orgRecord:tallyCultureSubTotalOf(record)
  fairySec.orgRecord:tallyIkonSubTotalOf(record)
  fairySec.orgRecord:tallyPowerSubTotalOf(record)
  
  local total = 0
  for _, subtotal in pairs(record.subtotals) do
    total = total + subtotal
  end

  record.total = total
end

function fairySec.orgRecord:tallyLeadershipSubTotalOf(record)
  local leaderSubTotal = 0

  for _, activity in ipairs(record.leadership) do
    leaderSubTotal = leaderSubTotal + activity.reward
  end

  return leaderSubTotal -- not saved
end

function fairySec.orgRecord:tallyTimequakeSubTotalOf(record)
  local timequakeSubTotal = table.size(record.timequake) * fairySec.rewards.timequake
  
  if timequakeSubTotal &gt; fairySec.orgPolicy.maxTimequakeReward then
    timequakeSubTotal = fairySec.orgPolicy.maxTimequakeReward
  end
  record.subtotals.timequake = timequakeSubTotal

  return record.subtotals.timequake
end

function fairySec.orgRecord:tallyDomothSubTotalOf(record)
  local domothSubTotal = table.size(record.domoth) * fairySec.rewards.domoth
  
  record.subtotals.domoth = domothSubTotal

  return record.subtotals.domoth
end

function fairySec.orgRecord:tallyConquestSubTotalOf(record)
  local conquestSubTotal = 0

  local conquestTypes = {"revolt", "domoth", "aetherflare", "otherConquest"}
  for _, type in ipairs(conquestTypes) do
    for _, activity in ipairs(record[type]) do
      conquestSubTotal = conquestSubTotal + activity.reward
    end
  end
  record.subtotals.conquest = conquestSubTotal
  
  return record.subtotals.conquest
end

function fairySec.orgRecord:tallyDesignSubTotalOf(record)
  record.subtotals.design = table.size(record.design) * fairySec.rewards.design
  
  return record.subtotals.design
end

function fairySec.orgRecord:tallyCultureSubTotalOf(record)
  local cultureSubTotal = 0

  local cultureTypes = {"library", "stage"}
  for _, type in ipairs(cultureTypes) do
    for _, activity in ipairs(record[type]) do
      cultureSubTotal = cultureSubTotal + activity.reward
    end
  end
  record.subtotals.culture = cultureSubTotal
  
  return record.subtotals.culture
end

function fairySec.orgRecord:tallyIkonSubTotalOf(record)
  if record.ikon[1] ~= nil and record.ikon[1].reward ~= nil then
    record.subtotals.ikon = record.ikon[1].reward
  else
    record.subtotals.ikon = 0
  end
  
  return record.subtotals.ikon
end

function fairySec.orgRecord:tallyPowerSubTotalOf(record)
  local powerSubtotal = 0

  for _, activity in ipairs(record.power) do
    powerSubtotal = powerSubtotal + activity.reward
  end
  record.subtotals.power = powerSubtotal
  
  return record.subtotals.power
end
-- end org-specific record functions

function fairySec.orgRecord:getSubTotal(type, record)
  return record.subtotals[type]
end


function fairySec.orgRecord:getTotal(record)
  return record.total
end

function fairySec.orgRecord:isPercentageDistribution()
  local total = fairySec.rewards.total
  return total.memberMarks &gt; total.yearlyCredits * 0.81
end

function fairySec.orgRecord:clearTallyErrorsAndWarnings()
  fairySec.db.tallyWarning = {}
  fairySec.db.tallyError = {}
end

function fairySec.orgRecord:addError(uniqueId, message)
  fairySec.db.tallyError[uniqueId] = message
end

function fairySec.orgRecord:addWarning(uniqueId, message)
  fairySec.db.tallyWarning[uniqueId] = message
end

function fairySec.orgRecord:echoTallyErrorsAndWarnings()
  for _, error in pairs(fairySec.db.tallyError) do
    fairySec:error(error)
  end
  for _, warning in pairs(fairySec.db.tallyWarning) do
    fairySec:warning(warning)
  end
end
</script>
          <eventHandlerList />
        </Script>
        <ScriptGroup isActive="yes" isFolder="yes">
          <name>fairySec sys</name>
          <packageName></packageName>
          <script></script>
          <eventHandlerList />
          <Script isActive="yes" isFolder="no">
            <name>fairySecGatherLogs</name>
            <packageName></packageName>
            <script>function fairySecGatherLogs()
  fairySec:gatherLogs()
end

function fairySec:gatherLogs()
  local gameYear = fairySec.rewards.total.year

  local weaveStart = math.ceil(
    (os.time(os.date("!*t")) - fairySec:getOSTime(fairySec.rewards.total.logDateStart) - fairySec.HOUR_IN_SECONDS) / fairySec.DAY_IN_SECONDS
  )
  local weaveEnd = math.floor(
    (os.time(os.date("!*t")) - fairySec:getOSTime(fairySec.rewards.total.logDateEnd) + fairySec.HOUR_IN_SECONDS) / fairySec.DAY_IN_SECONDS
  )
  fairySec:debug("weaveStart = "..weaveStart..", weaveEnd = "..weaveEnd)
  if weaveEnd &gt; 30 or weaveStart &lt; 0 then
    fairySec:error("year "..gameYear.." not in org logs")
    return
  end
  if weaveStart &gt; 30 then
    weaveStart = 30
    fairySec:warning("start date of "..gameYear.." may be beyond org logs")
  end
  if weaveEnd &lt; 0 then 
    weaveEnd = 0
    tempTimer(fairySec.config.gatherLogsEndTime * 2,
      function()
        if (fairySec.isRoughYearEnd()) then
          fairySec:warning("end date of "..gameYear.." may be in future")
          raiseEvent("fairySecEndGatherLogs")
        end
      end
    )
  end
  
  fairySec:setOriginalPageLength()
  tempTimer(fairySec.config.gatherLogsStartTime,
    function()
      send("config pagelength "..250)
      fairySec:searchLog(fairySec.orgPolicy.name, weaveStart, weaveEnd)
      -- because pointlog does not have blank weave logs, i.e., "No activity" entries,
      -- we must search more logs to ensure it includes this year
      fairySec:searchLog("pointlog", weaveStart, 0)
      fairySec:searchLog("powerlog", weaveStart - 6, weaveEnd + 6, "empowered")
      sendAll("project pfd", "more")
      fairySec:showGatherInstructions()
    end
  )
end</script>
            <eventHandlerList>
              <string>fairySecSetYearStartEnd</string>
            </eventHandlerList>
          </Script>
          <Script isActive="yes" isFolder="no">
            <name>fairySec set originalPageLength</name>
            <packageName></packageName>
            <script>function fairySec:setOriginalPageLength()
  enableTrigger("fairySec set config page length")
  send("config pagelength")
end</script>
            <eventHandlerList />
          </Script>
          <Script isActive="yes" isFolder="no">
            <name>fairySecEndGatherLogs</name>
            <packageName></packageName>
            <script>function fairySecEndGatherLogs()
  fairySec:endGatherLogs()
end

function fairySec:endGatherLogs()
  local gameYear = fairySec.rewards.total.year

  tempTimer(fairySec.config.gatherLogsEndTime,
    function()
      disableTrigger("Fairy Secretary")
      fairySec:trimGatheredLogs()
      fairySec:save()
      fairySec:note("gathering logs completed for "..gameYear, "x")
      send(" config pagelength "..fairySec.config.originalPageLength)
      fairySec:showGatherInstructions()
    end
  )
end


-- some entries may be before actual start; trim these out
function fairySec:trimGatheredLogs()
  local trackedActivities = fairySec.db.log

  for uniqueId, activity in spairs(trackedActivities) do
    if activity.timestamp &lt; fairySec.rewards.total.logDateStart then
      fairySec:deleteActivity(uniqueId)
    else
      break
    end
  end
end</script>
            <eventHandlerList>
              <string>fairySecEndGatherLogs</string>
            </eventHandlerList>
          </Script>
        </ScriptGroup>
      </Script>
      <Script isActive="yes" isFolder="no">
        <name>fairySec anomaly distribution</name>
        <packageName></packageName>
        <script>
fairySec.anomalies = {}
fairySec.anomalies.withdrawCmd = "murmur tree withdraw "

function fairySec.anomalies:withdraw(amt, type)
  local withdrawCmd = fairySec.anomalies.withdrawCmd..type
  for i=1,amt do send(withdrawCmd) end
  tempTimer(5, function() send("g "..amt.." "..type.." from tree") end)
end</script>
        <eventHandlerList />
      </Script>
    </ScriptGroup>
  </ScriptPackage>
</MudletPackage>
